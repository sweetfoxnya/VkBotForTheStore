from threading import Thread
import requests
import vk_api

import phonenumbers
import os.path
from vk_api.keyboard import VkKeyboard

from DBHelper import DBHelper, convertToBinaryData, writeTofile, checkUser
from vk_api import VkUpload
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id
from datetime import date

from keyboards import get_start, get_anketa, get_home, get_basket, get_katalog, get_order, get_back_anketa, get_pay, \
    get_making, get_chat, get_list, get_product, get_name, get_start_for_admin, get_list_search, get_name_for_search, \
    get_name_vkid, get_name_change, get_name_list_basket, get_list_order, get_order_all, get_order_all_list, home

vk_session = vk_api.VkApi(
    token="vk1.a.UtRaqh6hUBK2pHpcErYc-W4DVIzSrpquWdel63eSOl6lhhZlFyz2xOq2-9CZHG_FPu1h0TQxf5YdaJ0Gf8ZS90LKtV-ofDmXyGrVlsDY-W2uDEOAhrjnIRmTl-qDFkAxti3xLiYhkkPauRHqUPl5ZZ11m1IgcagujPAzDxZUgsa1KCWpYxOwbCnjUjhUqQt9cDrPAeh7ujFPMwmeos3OHw")

longpool = VkLongPoll(vk_session)
vk = vk_session.get_api()
helper = DBHelper()
commands_for_start = ['–ö–∞—Ç–∞–ª–æ–≥ üóÇ', '–ö–æ—Ä–∑–∏–Ω–∞ üõí', '–ó–∞–∫–∞–∑—ã üìã', '–ê–∫—Ü–∏–∏ üíØ', '–ê–Ω–∫–µ—Ç–∞ üìù', '–ü–æ–º–æ—â—å üôè', '–û –Ω–∞—Å üè™']
commands_for_anketa = ['–ò–º—è üë©üë®', '–¢–µ–ª–µ—Ñ–æ–Ω üìû', '–ì–æ—Ä–æ–¥ üè§', '–ê–¥—Ä–µ—Å üè®']
commands_for_making = ['–°–∞–º–æ–≤—ã–≤–æ–∑ üöπ', '–î–æ—Å—Ç–∞–≤–∫–∞ üöï']
commands_for_pay = ['–ù–∞–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ üíµ', '–ü–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É üí≥']
commands_for_change = ['–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä üí•', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä üëç']

user_template = [[], "", 0]

users = {}

def send_keyboard(userid, some_text, keyboard):
    vk_session.method("messages.send", {"user_id": userid, "message": some_text, "random_id": get_random_id(),
                                        'keyboard': keyboard.get_keyboard()})


def send_message(userid, some_text):
    vk_session.method("messages.send", {"user_id": userid, "message": some_text, "random_id": get_random_id()})


def handle_message_start(userid, message):
    if message == commands_for_start[0]:
        send_message(userid, "–ö–∞—Ç–∞–ª–æ–≥:")
        user = users.get(userid)
        user[2] = 0
        users.update({userid: user})
        key = get_list(user[2])
        write_card(userid, user[2])
        send_keyboard(userid, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É", key)
    elif message == commands_for_start[1]:
        key = get_basket(userid)
        send_message(userid, "–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∫–æ—Ä–∑–∏–Ω–∞:")
        write_card_basket(userid)
        send_keyboard(userid, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å", key)
    elif message == commands_for_start[2]:
        key = get_order(userid)
        send_message(userid, "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:")
        write_card_order(userid)
        send_keyboard(userid, "–ù–∞–∂–º–∏—Ç–µ —á—Ç–æ–±—ã –¥–µ—Ç–∞–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑", key)
    elif message == commands_for_start[3]:
        key = get_start()
        send_message(userid, get_sale())
        send_keyboard(userid, "–î–µ–π—Å—Ç–≤—É—é—â–∞—è –∞–∫—Ü–∏—è:", key)
    elif message == commands_for_start[4]:
        key = get_anketa()
        send_keyboard(userid, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:", key)
    elif message == commands_for_start[5]:
        key = get_chat()
        send_keyboard(userid, "–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", key)
        send_message(userid, "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:89995833622 \n\tViber: 89995833622 \n\tTelegram: 89995833622 \n\t–ü–æ—á—Ç–∞: "
                             "xamidullina.vika@mail.ru \n\t–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –≤–∫: https://vk.com/sellstolen\n\t –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ "
                             "–¥–æ–∂–¥–∞—Ç—å—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –Ω–∞–∂–º–∏—Ç–µ '–æ–ø–µ—Ä–∞—Ç–æ—Ä', –µ—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ "
                             "—á–∞—Ç —Å"
                             " –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é")
    elif message == commands_for_start[6]:
        key = get_home()
        send_keyboard(userid, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ", key)
        send_message(userid, "–ê–¥—Ä–µ—Å: –Æ–∂–Ω–æ—É—Ä–∞–ª—å—Å–∫, —É–ª. –ü–∏—Ä–æ–≥–æ–≤–∞ 75\n\t–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –∏ –º–µ–Ω–µ–¥–∂–µ—Ä: –•–∞–º–∏–¥—É–ª–ª–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è "
                             "–≠–¥—É–∞—Ä–¥–æ–≤–Ω–∞\n\t–î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: 15.08.2022\n\t–ö–∞–∫ –Ω–∞–π—Ç–∏: –ë–æ–ª—å—à–æ–π –≥–∞—Ä–∞–∂–Ω—ã–π –±–æ–∫—Å —Å –∂–µ–ª—Ç–æ–π "
                             "–≤—ã–≤–µ—Å–∫–æ–π '–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö'.\n\t–û–ø–∏—Å–∞–Ω–∏–µ: –¢–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è "
                             "–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞ –æ–≥–Ω–µüî•"
                             "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ‚úà –ø–æ –†–æ—Å—Å–∏–∏ \n\t–í –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n\t ‚úÖ –ß—É–≥—É–Ω–Ω—ã–µ –∫–∞–∑–∞–Ω—ã –∏–∑ "
                             "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω–∞"
                             "–∏ –ø–µ—á–∏ –∫ –Ω–∏–º, —Ç—Ä–µ–Ω–æ–≥–∏.\n\t ‚úÖ –ê—Ñ–≥–∞–Ω—Å–∫–∏–µ –∫–∞–∑–∞–Ω—ã –†–∞—à–∫–æ –ë–∞–±–∞.\n\t ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞–Ω–≥–∞–ª—ã –∏ "
                             "–ø–µ—á–∏.\n\t ‚úÖ"
                             "–£–∑–±–µ–∫—Å–∫–∏–µ –ø—á–∞–∫–∏.\n\t ‚úÖ –ö–µ—Ä–∞–º–∏—á–µ—Å–∫—É—é –ø–æ—Å—É–¥—É, —Å–∞–¥–∂–∏ (—á—É–≥—É–Ω–Ω—ã–µ –∏ —Å—Ç–∞–ª—å–Ω—ã–µ), –ø–æ–¥—Å—Ç–∞–≤–∫–∏ –∫ "
                             "–Ω–∏–º.\n\t ‚úÖ"
                             "–®–∞–º–ø—É—Ä—ã –ø–æ—à—Ç—É—á–Ω–æ –∏ –≤ –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –Ω–∞–±–æ—Ä–∞—Ö.\n\t ‚úÖ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –≥–æ—Ç–æ–≤–∫–∏ –¥–æ–º–∞ –∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ: "
                             "—à—É–º–æ–≤–∫–∏, –ø–æ–ª–æ–≤–Ω–∏–∫–∏, —â–∏–ø—Ü—ã, –∫–∞–º–Ω–∏ –¥–ª—è –≤—ã–ø–µ—á–∫–∏, –≤–∏–ª–∫–∏ - –Ω–æ–∂–∏")


def handle_message_anketa(userid, message):
    if message == commands_for_anketa[0]:
        key = get_back_anketa()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", key)

        new_msg = New_message(userid)

        handle_name(userid, new_msg)

    elif message == commands_for_anketa[1]:
        key = get_back_anketa()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω:", key)

        phone = New_message(userid)

        handle_phone(userid, phone)

    elif message == commands_for_anketa[2]:
        key = get_back_anketa()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥'", key)

        city = New_message(userid)

        handle_city(userid, city)
    elif message == commands_for_anketa[3]:
        key = get_back_anketa()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:", key)

        address = New_message(userid)

        handle_address(userid, address)


def handle_name(userid, name):
    helper.update('user', 'id', user_id, 'name', name)
    key = get_anketa()
    send_keyboard(userid, f"–í–∞—à–µ –∏–º—è '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", key)


def validate_phone_number(phone_number):
    try:
        parsed_number = phonenumbers.parse(phone_number, "RU")
        is_valid = phonenumbers.is_valid_number(parsed_number)
        return is_valid
    except phonenumbers.phonenumberutil.NumberParseException:
        return False


def handle_phone(userid, phone):
    if phone == '–ù–∞–∑–∞–¥ ‚¨Ö':
        handle_message_back(userid, phone)
    elif validate_phone_number(phone):
        helper.update('user', 'id', user_id, 'phone', phone)
        key = get_anketa()
        send_keyboard(userid, f"–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω '{phone}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", key)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # save_name(userid, phone)
    else:
        key = get_anketa()
        send_keyboard(userid, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. üòï", key)


def check_city(city):
    api_key = "0c4d541d-3452-4b46-b30a-63c4aaeda180"
    url = f"https://geocode-maps.yandex.ru/1.x/?apikey={api_key}&format=json&geocode={city}"

    response = requests.get(url)
    data = response.json()

    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        response_code = int(
            data["response"]["GeoObjectCollection"]["metaDataProperty"]["GeocoderResponseMetaData"]["found"])

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≥–æ—Ä–æ–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if response_code > 0:
            return True
        else:
            return False
    except KeyError:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞, —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
        return False


def handle_city(userid, city):
    if city == '–ù–∞–∑–∞–¥ ‚¨Ö':
        handle_message_back(userid, city)
    elif check_city(city):
        helper.update('user', 'id', user_id, 'town', city)
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # save_name(userid, city)
        key = get_anketa()
        send_keyboard(userid, f"–í–∞—à –≥–æ—Ä–æ–¥'{city}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", key)
    else:
        key = get_anketa()
        send_keyboard(userid, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –†–æ—Å—Å–∏–∏.", key)


def check_address(address):
    # –ó–∞–º–µ–Ω–∏—Ç–µ "your_api_key" –Ω–∞ –≤–∞—à –∫–ª—é—á API –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –Ø–Ω–¥–µ–∫—Å–∞
    api_key = "ec8e7d47-3fe3-42a4-a1de-c4f01f6f8f08"
    url = f"https://geocode-maps.yandex.ru/1.x/?apikey={api_key}&format=json&geocode={address}"

    response = requests.get(url)
    data = response.json()

    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        response_code = int(
            data["response"]["GeoObjectCollection"]["metaDataProperty"]["GeocoderResponseMetaData"]["found"])

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∞–¥—Ä–µ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if response_code > 0:
            return True
        else:
            return False
    except KeyError:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞, —Å—á–∏—Ç–∞–µ–º –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º
        return False


def handle_address(userid, address):
    if address == '–ù–∞–∑–∞–¥ ‚¨Ö':
        handle_message_back(userid, address)
    elif check_address(address):
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # save_name(userid, address)
        key = get_anketa()
        send_keyboard(userid, f"–í–∞—à –∞–¥—Ä–µ—Å'{address}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", key)
    else:
        key = get_anketa()
        send_keyboard(userid, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!", key)


def handle_find(userid, message):
    if message == "–ü–æ–∏—Å–∫ üîé":
        key = get_order()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", key)

        new_msg = New_message(userid)

        handle_product(userid, new_msg)


def get_sale():
    sales = helper.print_info('promotion')
    sale = sales[0][1]
    return sale

def handle_product(userid, product):
    product_names = helper.print_info('product')

    matching_products = [prod for prod in product_names if product.lower() in prod[1].lower()]
    matching_name = []
    index = 0

    key = VkKeyboard(one_time=True)
    if matching_products:
        key = get_list_search(product)
        for prod in matching_products:
            message, attachment = create_product_card(prod)
            vk.messages.send(
                random_id=vk_api.utils.get_random_id(),
                peer_id=userid,
                message=message,
                attachment=attachment
            )

        send_keyboard(userid, f"–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", key)
    else:
        key = get_order()
        send_keyboard(userid, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é.", key)
        new_msg = New_message(userid)
        handle_product(userid, new_msg)


def handle_products(userid, message):
    product_names = get_name_for_search()
    if message in product_names:
        basket = helper.get('basket', ['user_id'], [str(userid)])
        prod = helper.get('product', ['name'], [clean_message(message)])
        helper.insert('basket_products', ['basket_id', 'product_id', 'num'], [basket[0][0], prod[0][0], 1])

        key = get_product()
        send_keyboard(userid, f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ —Ç–æ–≤–∞—Ä '{message}'. –û–Ω –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –∫–æ—Ä–∑–∏–Ω—É", key)

def clean_message(mess):
    words = mess.split()
    words.pop(-1)
    word = " ".join(words)
    return word

def handle_change_basket(userid, message):
    product_names = get_name_list_basket(userid)
    if message in product_names:
        user = users.get(userid)
        user[1] = clean_message(message)
        users.update({userid: user})
        key = get_name_change()
        send_keyboard(userid, f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Ç–æ–≤–∞—Ä–æ–º", key)


def handle_change_basket_prod(userid, message):
    if message == commands_for_change[0]:
        user = users.get(userid)
        basket = helper.get('basket', ['user_id'], [str(userid)])
        prod_id = helper.get('product', ['name'], [user[1]])
        real = helper.get('basket_products', ['basket_id', 'product_id'], [str(basket[0][0]), str(prod_id[0][0])])
        helper.delete('basket_products', 'id', real[0][0])
        key = get_basket(userid)
        send_keyboard(userid, "–ö–æ—Ä–∑–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", key)
    elif message == commands_for_change[1]:
        user = users.get(userid)
        basket = helper.get('basket', ['user_id'], [str(userid)])
        prod_id = helper.get('product', ['name'], [user[1]])
        real = helper.get('basket_products', ['basket_id', 'product_id'], [str(basket[0][0]), str(prod_id[0][0])])
        num = real[0][3] + 1
        helper.update('basket_products', 'id', str(real[0][0]), 'num', num)
        key = get_basket(userid)
        send_keyboard(userid, "–ö–æ—Ä–∑–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∞", key)

def handle_message_making(userid, message):
    if message in commands_for_making:
        user = users.get(userid)
        user[0].clear()
        user[0].append(clean_message(message))
        users.update({userid: user})
        key = get_pay()
        send_keyboard(userid, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", key)



def handle_message_operator(userid, message):
    if message == "–û–ø–µ—Ä–∞—Ç–æ—Ä üìû":
        key = get_home()
        send_keyboard(userid, "–û–ø–µ—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ –ø–æ–¥–æ–π–¥—ë—Ç –∫ –≤–∞–º", key)


def handle_message_back(userid, message):
    if message == "–ù–∞–∑–∞–¥ ‚¨Ö":
        key = get_anketa()
        send_keyboard(userid, "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:", key)


def handle_message_order(userid, message):
    if message == "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ üì¶":
        key = get_making()
        send_keyboard(user_id, "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:", key)


def handle_message_pay(userid, message):
    if message in commands_for_pay:
        key = get_start()
        user = users.get(userid)
        user[0].append(clean_message(message))
        users.update({userid: user})
        basket = helper.get('basket', ['user_id'], [str(userid)])
        basket_prod = helper.get('basket_products', ['basket_id'], [str(basket[0][0])])
        products_ = []
        for prod_id in basket_prod:
            new_prod = helper.get('product', ['id'], [str(prod_id[2])])
            products_.append([new_prod[0], prod_id[3]])
        helper.delete('basket_products', 'basket_id', str(basket[0][0]))
        helper.insert('package', ['user_id', 'status', 'date', 'payment', 'delivery'], [userid, '–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞', date.today(), user[0][1], user[0][0]])
        package = helper.get('package', ['user_id'], [str(userid)])
        for product in products_:
            helper.insert('package_products', ['package_id', 'product_id', 'num'], [str(package[-1][0]), str(product[0][0]), product[1]])
        send_keyboard(userid, "–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è/–∑–≤–æ–Ω–∫–∞ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", key)


def handle_for_admin(userid, message):
    if message == "–∫–æ–¥":
        key = get_start_for_admin()
        send_keyboard(userid, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", key)


def handle_for_order(userid, message):
    orders_id = get_list_order(userid)
    if message in orders_id:
        package = helper.get('package_products', ['package_id'], [clean_message(message)])
        for prods in package:
            new_prod = helper.get('product', ['id'], [str(prods[2])])
            message, attachment = create_product_card(new_prod[0])
            send_message(userid, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prods[3]}")
            vk.messages.send(
                random_id=vk_api.utils.get_random_id(),
                peer_id=userid,
                message=message,
                attachment=attachment
            )
        key = get_start()
        send_keyboard(userid, "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ", key)


def handle_for_order_admin(userid, message):
    orders_id = get_order_all_list()
    if message in orders_id:
        package = helper.get('package_products', ['package_id'], [clean_message(message)])
        for prods in package:
            new_prod = helper.get('product', ['id'], [str(prods[2])])
            message, attachment = create_product_card(new_prod[0])
            send_message(userid, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {prods[3]}")
            vk.messages.send(
                random_id=vk_api.utils.get_random_id(),
                peer_id=userid,
                message=message,
                attachment=attachment
            )
        key = get_order_all()
        send_keyboard(userid, "–¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ", key)



def handle_for_list_of_orders(userid, message):
    if message == "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ üìñ":
        send_message(userid, "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:")
        write_card_order_all(userid)
        key = get_order_all()
        send_keyboard(userid, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", key)



def handle_for_status(userid, message):
    if message == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ üîÅ":
        key = home()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", key)

        new_msg = New_message(userid)

        handle_new_code(userid, new_msg)

def handle_new_code(userid, order):
    key = home()
    send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞", key)

    status = New_message(userid)

    handle_new_status(userid, status, order)


def handle_new_status(userid, new_status, order):
    helper.update('package', 'id', order, 'status', new_status)
    key = get_start_for_admin()
    send_keyboard(userid, f"–í–∞—à —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", key)


def handle_for_sale(userid, message):
    if message == "–ò–∑–º–µ–Ω–∏—Ç—å –∞–∫—Ü–∏—é üíØ":
        key = home()
        send_keyboard(userid, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∞–∫—Ü–∏—é:", key)

        new_msg = New_message(userid)

        handle_new_sale(userid, new_msg)


def handle_new_sale(userid, new_sale):
    helper.update('promotion', 'id', 1, 'description', new_sale)
    key = get_start_for_admin()
    send_keyboard(userid, f"–í–∞—à–∞ –Ω–æ–≤–∞—è –∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", key)


def write_card(userid, num):
    pos = num * 4
    end = pos + 4
    products_ = helper.print_info('product')
    if len(products_) < end:
        end = len(products_)
    for i in range(pos, end):
        message, attachment = create_product_card(products_[i])
        vk.messages.send(
            random_id=vk_api.utils.get_random_id(),
            peer_id=userid,
            message=message,
            attachment=attachment
        )


def handle_more(userid, message):
    if message == "–ï—â—ë üöÄ":
        user = users.get(userid)
        user[2] += 1
        users.update({userid: user})
        key = get_list(user[2])
        write_card(userid, user[2])
        send_keyboard(userid, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É", key)


def write_card_order(userid):
    orders = helper.get('package', ['user_id'], [str(userid)])
    for order in orders:
        mess = create_order_card(order)
        vk.messages.send(
            random_id=vk_api.utils.get_random_id(),
            peer_id=userid,
            message=mess
        )

def write_card_order_all(userid):
    orders = helper.print_info('package')
    for order in orders:
        user = helper.get('user', ['id'], [str(order[1])])
        mess = create_order_card_with_user(order, user[0])
        vk.messages.send(
            random_id=vk_api.utils.get_random_id(),
            peer_id=userid,
            message=mess
        )



def create_order_card(order):
    message = f"üîî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order[0]}\n" \
        f"üìÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order[2]} \n" \
        f"‚è≥ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order[3]} \n" \
        f"üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order[4]}\n" \
        f"üì¶ –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order[5]} "

    return message


def create_order_card_with_user(order, user):
    message = f"–ó–∞–∫–∞–∑\n" \
              f"üîî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order[0]}\n" \
              f"üìÑ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order[2]} \n" \
              f"‚è≥ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order[3]} \n" \
              f"üíµ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order[4]}\n" \
              f"üì¶ –¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {order[5]}\n" \
              f"–ö–ª–∏–µ–Ω—Ç \n" \
              f"‚è≥ –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞: {user[1]} \n" \
              f"‚è≥ –¢–µ–ª–µ—Ñ–æ–Ω: {user[2]} \n" \
              f"üíµ –ì–æ—Ä–æ–¥: {user[3]}\n" \
              f"üì¶ –ê–¥—Ä–µ—Å—Å: {user[4]}"
    return message


def write_card_basket(userid):
    basket = helper.get('basket', ['user_id'], [str(userid)])
    basket_prod = helper.get('basket_products', ['basket_id'], [str(basket[0][0])])
    products_ = []
    for prod_id in basket_prod:
        new_prod = helper.get('product', ['id'], [str(prod_id[2])])
        products_.append([new_prod[0], prod_id[3]])
    for product in products_:
        send_message(userid, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[1]}")
        message, attachment = create_product_card(product[0])
        vk.messages.send(
            random_id=vk_api.utils.get_random_id(),
            peer_id=userid,
            message=message,
            attachment=attachment
        )


def write_card_package(userid, packageid):
    package = helper.get('package', ['id', 'user_id'], [clean_message(packageid), str(userid)])  # TODO
    package_prod = helper.get('package_products', ['package_id'], [str(package[0][0])])
    products_ = []
    for prod_id in package_prod:
        new_prod = helper.get('product', ['id'], [str(prod_id[2])])
        products_.append([new_prod[0], prod_id[3]])
    for product in products_:
        send_message(userid, f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product[1]}")
        message, attachment = create_product_card(product[0])
        vk.messages.send(
            random_id=vk_api.utils.get_random_id(),
            peer_id=userid,
            message=message,
            attachment=attachment
        )


def create_product_card(product):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É"

    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π, –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é —Ç–æ–≤–∞—Ä–∞
    message = f"üì¶ {product[1]}\n" \
              f"üí∞ –¶–µ–Ω–∞: {product[3]}\n" \
              f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {product[2]}"

    path = f"./in/{product[0]}.jpg"
    check_file = os.path.isfile(path)
    if not check_file:
        writeTofile(product[4], path)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ–º –µ–µ –≤–ª–æ–∂–µ–Ω–∏–µ
    upload = VkUpload(vk_session)
    photo = upload.photo_messages(photos=path)[0]

    # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    attachment = f"photo{photo['owner_id']}_{photo['id']}"

    return message, attachment


def New_message(id):
    for event in longpool.listen():
        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.user_id == id:
            msg = event.text
            return msg

def addUser(user_id):
    if user_id in users:
        print("Good")
    else:
        users.update({user_id: user_template})

for event in longpool.listen():

    if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:

        msg = event.text
        mes = event.text.lower()
        user_id = event.user_id
        addUser(user_id)
        checkUser(user_id)
        handle_for_order(user_id, msg)
        handle_message_start(user_id, msg)
        handle_message_anketa(user_id, msg)
        handle_products(user_id, msg)
        handle_more(user_id, msg)
        handle_change_basket(user_id, msg)
        handle_change_basket_prod(user_id, msg)
        handle_message_making(user_id, msg)
        handle_message_operator(user_id, msg)
        handle_message_back(user_id, msg)
        handle_message_order(user_id, msg)
        handle_message_pay(user_id, msg)
        handle_find(user_id, msg)
        handle_for_order_admin(user_id, msg)
        handle_for_admin(user_id, mes)
        handle_for_list_of_orders(user_id, msg)
        handle_for_sale(user_id, msg)
        handle_for_status(user_id, msg)

        if (mes == "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ" or msg == "–ù–∞ –≥–ª–∞–≤–Ω—É—é üè°" or mes == "–Ω–∞ –≥–ª–∞–≤–Ω—É—é"
                or mes == "–Ω–∞—á–∞–ª–æ" or mes == "–≥–ª–∞–≤–Ω–∞—è" or mes == "—Å—Ç–∞—Ä—Ç"
                or msg == "–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—èüë•"):
            key = get_start()
            send_keyboard(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", key)

        Thread(target=handle_message_anketa, args=(event, id)).start()
        Thread(target=handle_for_sale, args=(event, id)).start()
        Thread(target=handle_for_status, args=(event, id)).start()
        Thread(target=handle_find, args=(event, id)).start()

